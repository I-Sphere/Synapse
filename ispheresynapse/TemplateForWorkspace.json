{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "ispheresynapse"
		},
		"STG_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'STG'"
		},
		"isphere-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'isphere-WorkspaceDefaultSqlServer'"
		},
		"ispheresynapse-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ispheresynapse-WorkspaceDefaultSqlServer'"
		},
		"ispheresynapse-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://isphere.dfs.core.windows.net"
		},
		"On New GeneralJournalAccountEntry File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/ff99046f-f0fa-420c-bbb5-ceea1002ae0f/resourceGroups/RG_DEV/providers/Microsoft.Storage/storageAccounts/isphere"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/D365_GeneralJournalAccountEntry')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "D365 GeneralJournalAccountEntry",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Scala_GeneralJournalAccountEntry",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Scala_GeneralJournalAccountEntry')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DW_RefData')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Site",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Site",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					},
					{
						"name": "Compte",
						"type": "SynapseNotebook",
						"dependsOn": [
							{
								"activity": "Site",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Compte",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Site')]",
				"[concat(variables('workspaceId'), '/notebooks/Compte')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Pipeline Test')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Scala_GeneralJournalAccountEntry_Copy1",
						"type": "SynapseNotebook",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebook": {
								"referenceName": "Scala_GeneralJournalAccountEntry_Copy1",
								"type": "NotebookReference"
							},
							"snapshot": true
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/notebooks/Scala_GeneralJournalAccountEntry_Copy1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ds_CompteComptable')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "STG",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Code",
						"type": "nvarchar"
					},
					{
						"name": "Name",
						"type": "nvarchar"
					},
					{
						"name": "Code_Business",
						"type": "nvarchar"
					},
					{
						"name": "Code_Parent",
						"type": "nvarchar"
					},
					{
						"name": "Source",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "RefData",
					"table": "CompteComptable"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/STG')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/STG')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('STG_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/isphere-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('isphere-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ispheresynapse-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ispheresynapse-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ispheresynapse-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ispheresynapse-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/On New GeneralJournalAccountEntry File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Pipeline Test",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/synapse/blobs/D365/ADAXGeneralJournalAccountEntryStaging/ADAXGeneralJournalAccountEntryStaging",
					"blobPathEndsWith": ".json",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('On New GeneralJournalAccountEntry File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/Pipeline Test')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/On Refresh RefData')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "DW_RefData",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Hour",
					"interval": 24,
					"startTime": "2021-08-10T06:00:00Z",
					"endTime": "2021-08-12T19:05:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 50,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/pipelines/DW_RefData')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Admin External Table Parquet')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/Security"
				},
				"content": {
					"query": "-- Create master key\nCREATE MASTER KEY;\nGO\n\n-- Create credential to access Data Lake\nCREATE DATABASE SCOPED CREDENTIAL ISphereDataLakeCredential\nWITH \n\tIDENTITY = 'isphere', \n\tSecret = 'clBmbxMDjtnc90HWGd3MJ0cuhq74zuaDviZw/2FSUGeQMrMR66ZueUDaJ88wtZCOn9Qf0oohT6+DZTU448uqvw==';\nGO\n\n-- Create external data source, pointing to Data Lake\nCREATE EXTERNAL DATA SOURCE ISphereDataLake\nwith (  \n      TYPE = HADOOP,\n      LOCATION ='abfss://synapse@isphere.dfs.core.windows.net',  \n      CREDENTIAL = ISphereDataLakeCredential  \n);  \nGO\n\n-- Create external file format\nCREATE EXTERNAL FILE FORMAT ParquetFileFormat  \nWITH (  \n    FORMAT_TYPE = PARQUET,  \n    DATA_COMPRESSION = 'org.apache.hadoop.io.compress.SnappyCodec'  \n);\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "ExemplePool",
						"databaseName": "ExemplePool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SQL script 1')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"content": {
					"query": "SELECT\n     cast([dt_Date] as date)    as [dt_Date]\n    ,[Mois_Num]\n    ,[Mois]\n    ,[Mois_Annee_Num]\n    ,[Mois_Annee]\n    ,[Trimestre]\n    ,[Trimestre_Annee]\n    ,[Semestre]\n    ,[Semestre_Annee]\n    ,[Annee]\n FROM\n    [dbo].[Temps]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "ExemplePool",
						"databaseName": "ExemplePool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dbo_Compte')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/External Table"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.Compte\nGO\nCREATE EXTERNAL TABLE dbo.Compte\n(\n\tcode_compte                     nvarchar(250),\n\tname_compte                     nvarchar(250),\n\tcode_business_compte            nvarchar(250),\n\tcode_business_compte_parent     nvarchar(250),\n\tsource                          nvarchar(250),\n    date_integration                DATETIME2\n)\nWITH\n(\n    DATA_SOURCE = ISphereDataLake\n  , FILE_FORMAT = ParquetFileFormat  \n  , LOCATION='DWH/compte/'  \n)\nGO\n\nSELECT * FROM dbo.Compte\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPerfPool",
						"databaseName": "SQLPerfPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dbo_GeneralJournalAccountEntry')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/External Table"
				},
				"content": {
					"query": "DROP EXTERNAL TABLE dbo.GeneralJournalAccountEntry\nGO\n\nCREATE EXTERNAL TABLE dbo.GeneralJournalAccountEntry\n(\n\tACCOUNTDISPLAYVALUE                     nvarchar(250),\n\tACCOUNTINGCURRENCYAMOUNT                float,\n\tACCOUNTINGDATE                     \t\tbigint,\n\tDESCRIPTION                     \t\tnvarchar(250),\n\tDOCUMENTDATE                     \t\tbigint,\n\tPOSTINGTYPE                     \t\tbigint,\n\tTRANSACTIONCURRENCYCREDITAMOUNT        \tfloat,\n\tTRANSACTIONCURRENCYDEBITAMOUNT         \tfloat,\n\tSITE                     \t\t\t\tint,\n\tdate_integration\t\t\t\t\t\tDATETIME2\n)\nWITH\n(\n    DATA_SOURCE = ISphereDataLake\n  , FILE_FORMAT = ParquetFileFormat  \n  , LOCATION='DWH/GeneralJournalAccountEntry'  \n)\nGO\n\nSELECT * FROM dbo.GeneralJournalAccountEntry\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPerfPool",
						"databaseName": "SQLPerfPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dbo_Site')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/External Table"
				},
				"content": {
					"query": "-- Create external table for Taxi Zones\nDROP EXTERNAL TABLE dbo.Site\nGO\nCREATE EXTERNAL TABLE dbo.Site\n(\n\tid_site             int,\n\tcode_site           nvarchar(250),\n\tsite                nvarchar(250),\n\tcode_parent         nvarchar(250),\n\ttype_site           nvarchar(250),\n\tcode_activite       nvarchar(250),\n\tactivite            nvarchar(250),\n    societe             nvarchar(250),\n    date_integration    DATETIME2\n)\nWITH\n(\n    DATA_SOURCE = ISphereDataLake\n  , FILE_FORMAT = ParquetFileFormat  \n  , LOCATION='DWH/site/'  \n)\nGO\n\nSELECT * FROM dbo.Site order by 1\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPerfPool",
						"databaseName": "SQLPerfPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dbo_Temps')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/External Table"
				},
				"content": {
					"query": "-- Create external table for Taxi Zones\nDROP EXTERNAL TABLE dbo.Temps\nGO\nCREATE EXTERNAL TABLE dbo.Temps\n(\n\tdt_Date             nvarchar(50),\n\tMois_Num            INT,\n\tMois                nvarchar(50),\n\tMois_Annee_Num      INT,\n\tMois_Annee          nvarchar(50),\n\tTrimestre           nvarchar(50),\n\tTrimestre_Annee     nvarchar(50),\n    Semestre            nvarchar(50),\n    Semestre_Annee      nvarchar(50),\n    Annee               nvarchar(4),\n    date_integration    DATETIME2\n)\nWITH\n(\n    DATA_SOURCE = ISphereDataLake\n  , FILE_FORMAT = ParquetFileFormat  \n  , LOCATION='DWH/temps/'  \n)\nGO\n\nSELECT * FROM dbo.temps order by 1\nGO",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "ExemplePool",
						"databaseName": "ExemplePool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dbo_vwCompte')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/View"
				},
				"content": {
					"query": "DROP VIEW [dbo].[vw_Compte]\nGO\n\nCREATE VIEW [dbo].[vw_Compte] AS\nWITH T AS (\n   SELECT\n       c.[code_compte]\n      ,c.[name_compte]\n      ,c.[code_business_compte]\n      ,c.[code_business_compte_parent]\n      ,c.[source]\n   FROM\n      [dbo].[Compte] c\n      inner join (select max([date_integration]) [date_integration] from [dbo].[Compte]) d\n         on d.[date_integration] = c.[date_integration]\n    GROUP BY\n       c.[code_compte]\n      ,c.[name_compte]\n      ,c.[code_business_compte]\n      ,c.[code_business_compte_parent]\n      ,c.[source]\n)\nSELECT\n       [code_compte]\n      ,[name_compte]\n      ,[code_business_compte]\n      ,[code_business_compte_parent]\n      ,[code_business_compte] + ' - ' + [name_compte] as [compte]\nFROM\n   T\nWHERE\n   [source] = 'D365'\n/*\nUNION\nSELECT\n       T.[code_compte]\n      ,T.[name_compte]\n      ,T.[code_business_compte]\n      ,T.[code_business_compte_parent]\nFROM\n   T\n   left outer join T T1\n      on    T1.[source] = 'D365'\n      and   T1.[code_compte] = T.[code_compte]\nWHERE\n   T.[source] = 'Unicom'\n   and T1.[code_compte] is null\n*/",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPerfPool",
						"databaseName": "SQLPerfPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dbo_vw_Site')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/View"
				},
				"content": {
					"query": "CREATE VIEW dbo.vw_Site AS\nSELECT\n     s.[id_site]\n    ,s.[code_site]\n    ,s.[site]\n    ,s.[code_parent]\n    ,s.[type_site]\n    ,s.[code_activite]\n    ,s.[activite]\n    ,s.[societe]\n FROM\n    [dbo].[Site] s\n    inner join (select max([date_integration]) [date_integration] from [dbo].[Site]) d\n        on d.[date_integration] = s.[date_integration]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "SQLPerfPool",
						"databaseName": "SQLPerfPool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dbo_vw_Temps')]",
			"type": "Microsoft.Synapse/workspaces/sqlscripts",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Exemple/View"
				},
				"content": {
					"query": "CREATE VIEW dbo.vw_Temps AS\nSELECT\n     cast([dt_Date] as date)    as [dt_Date]\n    ,[Mois_Num]\n    ,[Mois]\n    ,[Mois_Annee_Num]\n    ,[Mois_Annee]\n    ,[Trimestre]\n    ,[Trimestre_Annee]\n    ,[Semestre]\n    ,[Semestre_Annee]\n    ,[Annee]\n FROM\n    [dbo].[Temps]",
					"metadata": {
						"language": "sql"
					},
					"currentConnection": {
						"poolName": "ExemplePool",
						"databaseName": "ExemplePool"
					},
					"resultLimit": 5000
				},
				"type": "SqlQuery"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Compte')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Example/RefData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpooldev1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ff99046f-f0fa-420c-bbb5-ceea1002ae0f/resourceGroups/RG_DEV/providers/Microsoft.Synapse/workspaces/ispheresynapse/bigDataPools/sparkpooldev1",
						"name": "sparkpooldev1",
						"type": "Spark",
						"endpoint": "https://ispheresynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpooldev1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.0",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val currDateTime = new java.text.SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(System.currentTimeMillis())"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"source": [
							"val dfSource = (spark.read.format(\"jdbc\")\n",
							".option(\"url\",  \"jdbc:sqlserver://devispheresql.database.windows.net:1433;databaseName=D365_BI_STG\")\n",
							".option(\"dbtable\", \"D365_BI_STG.RefData.CompteComptable\")\n",
							".option(\"user\", \"sql\")\n",
							".option(\"password\", \"ISphere4Success\") \n",
							".option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\") \n",
							".load())"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val df = dfSource.withColumn(\"date_integration\", current_timestamp())"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val file_path = \"abfss://synapse@isphere.dfs.core.windows.net/DWH/compte/compte_\" + currDateTime.toString() + \".parquet\"\n",
							"df.write.mode(\"overwrite\").parquet(file_path)"
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Scala_GeneralJournalAccountEntry')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Example/D365"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpooldev1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ff99046f-f0fa-420c-bbb5-ceea1002ae0f/resourceGroups/RG_DEV/providers/Microsoft.Synapse/workspaces/ispheresynapse/bigDataPools/sparkpooldev1",
						"name": "sparkpooldev1",
						"type": "Spark",
						"endpoint": "https://ispheresynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpooldev1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.0",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"val dfSource = spark.read.json(\"abfss://synapse@isphere.dfs.core.windows.net/D365/ADAXGeneralJournalAccountEntryStaging/ADAXGeneralJournalAccountEntryStaging_*.json\")\n",
							"\n",
							"val dfJournal = dfSource.withColumn(\"SITE\", split(col(\"LEDGERACCOUNT\"), \"-\").getItem(1))"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val dfSite = spark.read.sqlanalytics(\"ExemplePool.dbo.Site\").select(\n",
							"    \"id_site\",\n",
							"    \"code_site\"\n",
							")"
						],
						"outputs": [],
						"execution_count": 9
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val df = dfJournal.join(dfSite, dfJournal(\"SITE\") === dfSite(\"code_site\")).select(\n",
							"                dfJournal(\"ACCOUNTDISPLAYVALUE\").alias(\"ACCOUNTDISPLAYVALUE\"),\n",
							"                dfJournal(\"ACCOUNTINGCURRENCYAMOUNT\").alias(\"ACCOUNTINGCURRENCYAMOUNT\"),\n",
							"                dfJournal(\"ACCOUNTINGDATE\").alias(\"ACCOUNTINGDATE\"),\n",
							"                dfJournal(\"DESCRIPTION\").alias(\"DESCRIPTION\"),\n",
							"                dfJournal(\"DOCUMENTDATE\").alias(\"DOCUMENTDATE\"),\n",
							"                dfJournal(\"POSTINGTYPE\").alias(\"POSTINGTYPE\"),\n",
							"                dfJournal(\"TRANSACTIONCURRENCYCREDITAMOUNT\").alias(\"TRANSACTIONCURRENCYCREDITAMOUNT\"),\n",
							"                dfJournal(\"TRANSACTIONCURRENCYDEBITAMOUNT\").alias(\"TRANSACTIONCURRENCYDEBITAMOUNT\"),\n",
							"                dfSite(\"id_site\").alias(\"SITE\"),\n",
							"                (current_timestamp()).as(\"date_integration\")\n",
							"        )"
						],
						"outputs": [],
						"execution_count": 10
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val currDateTime = new java.text.SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(System.currentTimeMillis())\n",
							"val file_path = \"abfss://synapse@isphere.dfs.core.windows.net/DWH/GeneralJournalAccountEntry/GeneralJournalAccountEntry_\" + currDateTime.toString() + \".parquet\"\n",
							"df.write.mode(\"overwrite\").parquet(file_path)"
						],
						"outputs": [],
						"execution_count": 11
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Scala_GeneralJournalAccountEntry_Copy1')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Example/D365"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpooldev1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ff99046f-f0fa-420c-bbb5-ceea1002ae0f/resourceGroups/RG_DEV/providers/Microsoft.Synapse/workspaces/ispheresynapse/bigDataPools/sparkpooldev1",
						"name": "sparkpooldev1",
						"type": "Spark",
						"endpoint": "https://ispheresynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpooldev1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.0",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true,
							"tags": [
								"parameters"
							]
						},
						"source": [
							"val file_to_process = \"abfss://synapse@isphere.dfs.core.windows.net/D365/ADAXGeneralJournalAccountEntryStaging/ADAXGeneralJournalAccountEntryStaging_*.json\""
						],
						"outputs": [],
						"execution_count": 1
					},
					{
						"cell_type": "code",
						"source": [
							"val dfSource = spark.read.json(file_to_process)\n",
							"\n",
							"val dfJournal = dfSource.withColumn(\"SITE\", split(col(\"LEDGERACCOUNT\"), \"-\").getItem(1))"
						],
						"outputs": [],
						"execution_count": 2
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val dfSite = spark.read.sqlanalytics(\"ExemplePool.dbo.Site\").select(\n",
							"    \"id_site\",\n",
							"    \"code_site\"\n",
							")"
						],
						"outputs": [],
						"execution_count": 3
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val df = dfJournal.join(dfSite, dfJournal(\"SITE\") === dfSite(\"code_site\")).select(\n",
							"                dfJournal(\"ACCOUNTDISPLAYVALUE\").alias(\"ACCOUNTDISPLAYVALUE\"),\n",
							"                dfJournal(\"ACCOUNTINGCURRENCYAMOUNT\").alias(\"ACCOUNTINGCURRENCYAMOUNT\"),\n",
							"                dfJournal(\"ACCOUNTINGDATE\").alias(\"ACCOUNTINGDATE\"),\n",
							"                dfJournal(\"DESCRIPTION\").alias(\"DESCRIPTION\"),\n",
							"                dfJournal(\"DOCUMENTDATE\").alias(\"DOCUMENTDATE\"),\n",
							"                dfJournal(\"POSTINGTYPE\").alias(\"POSTINGTYPE\"),\n",
							"                dfJournal(\"TRANSACTIONCURRENCYCREDITAMOUNT\").alias(\"TRANSACTIONCURRENCYCREDITAMOUNT\"),\n",
							"                dfJournal(\"TRANSACTIONCURRENCYDEBITAMOUNT\").alias(\"TRANSACTIONCURRENCYDEBITAMOUNT\"),\n",
							"                dfSite(\"id_site\").alias(\"SITE\"),\n",
							"                (current_timestamp()).as(\"date_integration\")\n",
							"        )"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val currDateTime = new java.text.SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(System.currentTimeMillis())\n",
							"val file_path = \"abfss://synapse@isphere.dfs.core.windows.net/DWH/GeneralJournalAccountEntry/GeneralJournalAccountEntry_\" + currDateTime.toString() + \".parquet\"\n",
							"df.write.mode(\"overwrite\").parquet(file_path)"
						],
						"outputs": [],
						"execution_count": 5
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Site')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Example/RefData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpooldev1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ff99046f-f0fa-420c-bbb5-ceea1002ae0f/resourceGroups/RG_DEV/providers/Microsoft.Synapse/workspaces/ispheresynapse/bigDataPools/sparkpooldev1",
						"name": "sparkpooldev1",
						"type": "Spark",
						"endpoint": "https://ispheresynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpooldev1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.0",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"val dfSite = (spark.read.format(\"jdbc\")\n",
							".option(\"url\",  \"jdbc:sqlserver://devispheresql.database.windows.net:1433;databaseName=D365_BI_STG\")\n",
							".option(\"dbtable\", \"RefData.Site\")\n",
							".option(\"user\", \"sql\")\n",
							".option(\"password\", \"ISphere4Success\") \n",
							".option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\") \n",
							".load())\n",
							"\n",
							"//dfSite.show(5)"
						],
						"outputs": [],
						"execution_count": 4
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val dfActivite = (spark.read.format(\"jdbc\")\n",
							".option(\"url\",  \"jdbc:sqlserver://devispheresql.database.windows.net:1433;databaseName=D365_BI_STG\")\n",
							".option(\"dbtable\", \"RefData.Activite\")\n",
							".option(\"user\", \"sql\")\n",
							".option(\"password\", \"ISphere4Success\") \n",
							".option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\") \n",
							".load())\n",
							"\n",
							"//dfActivite.show(5)"
						],
						"outputs": [],
						"execution_count": 5
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val df = dfSite.join(dfActivite, dfSite(\"Activite\") === dfActivite(\"Code\")).select(\n",
							"                dfSite(\"id\").alias(\"id_site\"),\n",
							"                dfSite(\"Code\").alias(\"code_site\"),\n",
							"                dfSite(\"Name\").alias(\"site\"),\n",
							"                dfSite(\"CodeParent\").alias(\"code_parent\"),\n",
							"                dfSite(\"SiteType\").alias(\"type_site\"),\n",
							"                dfActivite(\"Code\").alias(\"code_activite\"),\n",
							"                dfActivite(\"Name\").alias(\"activite\"),\n",
							"                dfActivite(\"societe\"),\n",
							"                (current_timestamp()).as(\"date_integration\")\n",
							"        )"
						],
						"outputs": [],
						"execution_count": 6
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val currDateTime = new java.text.SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(System.currentTimeMillis())\n",
							"val file_path = \"abfss://synapse@isphere.dfs.core.windows.net/DWH/site/site_\" + currDateTime.toString() + \".parquet\"\n",
							"df.write.mode(\"overwrite\").parquet(file_path)"
						],
						"outputs": [],
						"execution_count": 7
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Temps')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Example/RefData"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "sparkpooldev1",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_spark",
						"display_name": "Synapse Spark"
					},
					"language_info": {
						"name": "scala"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ff99046f-f0fa-420c-bbb5-ceea1002ae0f/resourceGroups/RG_DEV/providers/Microsoft.Synapse/workspaces/ispheresynapse/bigDataPools/sparkpooldev1",
						"name": "sparkpooldev1",
						"type": "Spark",
						"endpoint": "https://ispheresynapse.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkpooldev1",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "3.0",
						"nodeCount": 3,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"val dfTemps = (spark.read.format(\"jdbc\")\n",
							".option(\"url\",  \"jdbc:sqlserver://devispheresql.database.windows.net:1433;databaseName=D365_BI_STG\")\n",
							".option(\"dbtable\", \"RefData.Temps\")\n",
							".option(\"user\", \"sql\")\n",
							".option(\"password\", \"ISphere4Success\") \n",
							".option(\"driver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\") \n",
							".load())\n",
							"\n",
							"//dfTemps.withColumn(\"test\", date_format(dfTemps(\"dt_Date\"), \"yyyy-MM-dd\")).show(5)"
						],
						"outputs": [],
						"execution_count": 13
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val df = dfTemps.select(\n",
							"                date_format(dfTemps(\"dt_Date\"), \"yyyy-MM-dd\").alias(\"dt_Date\"),\n",
							"                dfTemps(\"Mois_Num\"),\n",
							"                dfTemps(\"Mois\"),\n",
							"                dfTemps(\"Mois_Annee_Num\"),\n",
							"                dfTemps(\"Mois_Annee\"),\n",
							"                dfTemps(\"Trimestre\"),\n",
							"                dfTemps(\"Trimestre_Annee\"),\n",
							"                dfTemps(\"Semestre\"),\n",
							"                dfTemps(\"Semestre_Annee\"),\n",
							"                dfTemps(\"Annee\"),\n",
							"                (current_timestamp()).as(\"date_integration\")\n",
							"        )\n",
							"dfTemps.printSchema()"
						],
						"outputs": [],
						"execution_count": 16
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							"val currDateTime = new java.text.SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(System.currentTimeMillis())\n",
							"val file_path = \"abfss://synapse@isphere.dfs.core.windows.net/DWH/temps/temps_\" + currDateTime.toString() + \".parquet\"\n",
							"df.write.mode(\"overwrite\").parquet(file_path)"
						],
						"outputs": [],
						"execution_count": 15
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Test_Net')]",
			"type": "Microsoft.Synapse/workspaces/notebooks",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "Test"
				},
				"nbformat": 4,
				"nbformat_minor": 2,
				"bigDataPool": {
					"referenceName": "devpool",
					"type": "BigDataPoolReference"
				},
				"sessionProperties": {
					"driverMemory": "28g",
					"driverCores": 4,
					"executorMemory": "28g",
					"executorCores": 4,
					"numExecutors": 2,
					"conf": {
						"spark.dynamicAllocation.enabled": "false",
						"spark.dynamicAllocation.minExecutors": "2",
						"spark.dynamicAllocation.maxExecutors": "2"
					}
				},
				"metadata": {
					"saveOutput": true,
					"kernelspec": {
						"name": "synapse_pyspark",
						"display_name": "Synapse PySpark"
					},
					"language_info": {
						"name": "csharp"
					},
					"a365ComputeOptions": {
						"id": "/subscriptions/ff99046f-f0fa-420c-bbb5-ceea1002ae0f/resourceGroups/RG_DEV/providers/Microsoft.Synapse/workspaces/isphere/bigDataPools/devpool",
						"name": "devpool",
						"type": "Spark",
						"endpoint": "https://isphere.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/devpool",
						"auth": {
							"type": "AAD",
							"authResource": "https://dev.azuresynapse.net"
						},
						"sparkVersion": "2.4",
						"nodeCount": 10,
						"cores": 4,
						"memory": 28
					}
				},
				"cells": [
					{
						"cell_type": "code",
						"source": [
							"Action HelloWorld = () => Console.WriteLine(\"Hello World !!!\");\n",
							"\n",
							"HelloWorld();"
						],
						"outputs": [],
						"execution_count": 8
					},
					{
						"cell_type": "code",
						"metadata": {
							"jupyter": {
								"source_hidden": false,
								"outputs_hidden": false
							},
							"nteract": {
								"transient": {
									"deleting": false
								}
							},
							"collapsed": true
						},
						"source": [
							""
						],
						"outputs": [],
						"execution_count": null
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ExemplePool')]",
			"type": "Microsoft.Synapse/workspaces/sqlPools",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"collation": "SQL_Latin1_General_CP1_CI_AS",
				"maxSizeBytes": 263882790666240,
				"restorePointInTime": "0001-01-01T00:00:00",
				"annotations": []
			},
			"dependsOn": [],
			"location": "westeurope"
		}
	]
}